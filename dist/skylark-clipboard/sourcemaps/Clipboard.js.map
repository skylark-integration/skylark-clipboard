{"version":3,"sources":["Clipboard.js"],"names":["define","skylark","Emitter","eventer","ClipboardAction","getAttributeValue","suffix","element","attribute","hasAttribute","getAttribute","attach","[object Object]","trigger","options","super","this","resolveOptions","listenClick","action","defaultAction","target","defaultTarget","text","defaultText","container","document","body","self","callback","e","onClick","on","listener","destroy","off","delegateTarget","currentTarget","clipboardAction","emitter","selector","querySelector","actions","support","queryCommandSupported","forEach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,wBACA,uBACA,qBACF,SAASC,EAAQC,EAAQC,EAAQC,GAsI/B,SAASC,EAAkBC,EAAQC,GAC/B,MAAMC,oBAA8BF,IAEpC,GAAKC,EAAQE,aAAaD,GAI1B,OAAOD,EAAQG,aAAaF,GAGhC,OAAOP,EAAQU,OAAO,+BAzIET,EAKpBU,YAAYC,EAASC,GACjBC,QAEAC,KAAKC,eAAeH,GACpBE,KAAKE,YAAYL,GAQrBD,eAAeE,MACXE,KAAKG,OAA0C,mBAAtBL,EAAQK,OAA4BL,EAAQK,OAAYH,KAAKI,cACtFJ,KAAKK,OAA0C,mBAAtBP,EAAQO,OAA4BP,EAAQO,OAAYL,KAAKM,cACtFN,KAAKO,KAA0C,mBAAtBT,EAAQS,KAA4BT,EAAQS,KAAYP,KAAKQ,YACtFR,KAAKS,UAA0C,iBAAtBX,EAAQW,UAA4BX,EAAQW,UAAYC,SAASC,KAO9Ff,YAAYC,GACR,IAAIe,EAAOZ,KACPa,EAAW,SAASC,GAChBF,EAAKG,QAAQD,IAGrB3B,EAAQ6B,GAAGnB,EAAS,QAASgB,GAE7Bb,KAAKiB,UACDC,QAAU,WACN/B,EAAQgC,IAAItB,EAAQ,QAAQgB,KASxCjB,QAAQkB,GACJ,MAAMjB,EAAUiB,EAAEM,gBAAkBN,EAAEO,cAElCrB,KAAKsB,kBACLtB,KAAKsB,gBAAkB,MAG3BtB,KAAKsB,gBAAkB,IAAIlC,GACvBe,OAAYH,KAAKG,OAAON,GACxBQ,OAAYL,KAAKK,OAAOR,GACxBU,KAAYP,KAAKO,KAAKV,GACtBY,UAAYT,KAAKS,UACjBZ,QAAYA,EACZ0B,QAAYvB,OAQpBJ,cAAcC,GACV,OAAOR,EAAkB,SAAUQ,GAOvCD,cAAcC,GACV,MAAM2B,EAAWnC,EAAkB,SAAUQ,GAE7C,GAAI2B,EACA,OAAOd,SAASe,cAAcD,GAStC5B,mBAAmBO,GAAU,OAAQ,QACjC,MAAMuB,EAA6B,iBAAXvB,GAAwBA,GAAUA,EAC1D,IAAIwB,IAAYjB,SAASkB,sBAMzB,OAJAF,EAAQG,QAAS1B,IACbwB,EAAUA,KAAajB,SAASkB,sBAAsBzB,KAGnDwB,EAOX/B,YAAYC,GACR,OAAOR,EAAkB,OAAQQ,GAMrCD,UACII,KAAKiB,SAASC,UAEVlB,KAAKsB,kBACLtB,KAAKsB,gBAAgBJ,UACrBlB,KAAKsB,gBAAkB","file":"../Clipboard.js","sourcesContent":["define([\n    \"skylark-langx/skylark\",\n    \"skylark-langx/Emitter\",\n    \"skylark-domx-eventer\",\n    \"./ClipboardAction\"\n],function(skylark,Emitter,eventer,ClipboardAction){\n\n\n    /**\n     * Base class which takes one or more elements, adds event listeners to them,\n     * and instantiates a new `ClipboardAction` on each click.\n     */\n    class Clipboard extends Emitter {\n        /**\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         * @param {Object} options\n         */\n        constructor(trigger, options) {\n            super();\n\n            this.resolveOptions(options);\n            this.listenClick(trigger);\n        }\n\n        /**\n         * Defines if attributes would be resolved using internal setter functions\n         * or custom functions that were passed in the constructor.\n         * @param {Object} options\n         */\n        resolveOptions(options = {}) {\n            this.action    = (typeof options.action    === 'function') ? options.action    : this.defaultAction;\n            this.target    = (typeof options.target    === 'function') ? options.target    : this.defaultTarget;\n            this.text      = (typeof options.text      === 'function') ? options.text      : this.defaultText;\n            this.container = (typeof options.container === 'object')   ? options.container : document.body;\n        }\n\n        /**\n         * Adds a click event listener to the passed trigger.\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         */\n        listenClick(trigger) {\n            var self = this,\n                callback = function(e) {\n                    self.onClick(e);\n                };\n\n            eventer.on(trigger, 'click', callback);\n\n            this.listener = {\n                destroy : function(){\n                    eventer.off(trigger,'click',callback);\n                }\n            };\n        }\n\n        /**\n         * Defines a new `ClipboardAction` on each click event.\n         * @param {Event} e\n         */\n        onClick(e) {\n            const trigger = e.delegateTarget || e.currentTarget;\n\n            if (this.clipboardAction) {\n                this.clipboardAction = null;\n            }\n\n            this.clipboardAction = new ClipboardAction({\n                action    : this.action(trigger),\n                target    : this.target(trigger),\n                text      : this.text(trigger),\n                container : this.container,\n                trigger   : trigger,\n                emitter   : this\n            });\n        }\n\n        /**\n         * Default `action` lookup function.\n         * @param {Element} trigger\n         */\n        defaultAction(trigger) {\n            return getAttributeValue('action', trigger);\n        }\n\n        /**\n         * Default `target` lookup function.\n         * @param {Element} trigger\n         */\n        defaultTarget(trigger) {\n            const selector = getAttributeValue('target', trigger);\n\n            if (selector) {\n                return document.querySelector(selector);\n            }\n        }\n\n        /**\n         * Returns the support of the given action, or all actions if no action is\n         * given.\n         * @param {String} [action]\n         */\n        static isSupported(action = ['copy', 'cut']) {\n            const actions = (typeof action === 'string') ? [action] : action;\n            let support = !!document.queryCommandSupported;\n\n            actions.forEach((action) => {\n                support = support && !!document.queryCommandSupported(action);\n            });\n\n            return support;\n        }\n\n        /**\n         * Default `text` lookup function.\n         * @param {Element} trigger\n         */\n        defaultText(trigger) {\n            return getAttributeValue('text', trigger);\n        }\n\n        /**\n         * Destroy lifecycle.\n         */\n        destroy() {\n            this.listener.destroy();\n\n            if (this.clipboardAction) {\n                this.clipboardAction.destroy();\n                this.clipboardAction = null;\n            }\n        }\n    }\n\n\n    /**\n     * Helper function to retrieve attribute value.\n     * @param {String} suffix\n     * @param {Element} element\n     */\n    function getAttributeValue(suffix, element) {\n        const attribute = `data-clipboard-${suffix}`;\n\n        if (!element.hasAttribute(attribute)) {\n            return;\n        }\n\n        return element.getAttribute(attribute);\n    }\n\n    return skylark.attach(\"intg.Clipboard\",Clipboard);\n\n\n});\n\n"]}